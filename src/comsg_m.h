//
// Generated file, do not edit! Created by opp_msgtool 6.0 from comsg.msg.
//

#ifndef __COMSG_M_H
#define __COMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Comsg;
/**
 * Class generated from <tt>comsg.msg:19</tt> by opp_msgtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet Comsg
 * {
 *     \@customize(true);  // see the generated C++ header for more info
 *     int node_id;
 *     int start_time;
 * }
 * </pre>
 *
 * Comsg_Base is only useful if it gets subclassed, and Comsg is derived from it.
 * The minimum code to be written for Comsg is the following:
 *
 * <pre>
 * class Comsg : public Comsg_Base
 * {
 *   private:
 *     void copy(const Comsg& other) { ... }

 *   public:
 *     Comsg(const char *name=nullptr, short kind=0) : Comsg_Base(name,kind) {}
 *     Comsg(const Comsg& other) : Comsg_Base(other) {copy(other);}
 *     Comsg& operator=(const Comsg& other) {if (this==&other) return *this; Comsg_Base::operator=(other); copy(other); return *this;}
 *     virtual Comsg *dup() const override {return new Comsg(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from Comsg_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(Comsg)
 * </pre>
 */
class Comsg_Base : public ::omnetpp::cPacket
{
  protected:
    int node_id = 0;
    int start_time = 0;

  private:
    void copy(const Comsg_Base& other);

  protected:
    bool operator==(const Comsg_Base&) = delete;
    // make constructors protected to avoid instantiation


  public:
    Comsg_Base(const char *name=nullptr, short kind=0);
    Comsg_Base(const Comsg_Base& other);
    // make assignment operator protected to force the user override it
    Comsg_Base& operator=(const Comsg_Base& other);
    virtual ~Comsg_Base();
    virtual Comsg_Base *dup() const override {return new Comsg_Base(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getNode_id() const;
    virtual void setNode_id(int node_id);

    virtual int getStart_time() const;
    virtual void setStart_time(int start_time);
};


namespace omnetpp {

template<> inline Comsg_Base *fromAnyPtr(any_ptr ptr) { return check_and_cast<Comsg_Base*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __COMSG_M_H

